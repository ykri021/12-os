OUTPUT_FORMAT("elf32-h8300")
OUTPUT_ARCH(h8300h)
ENTRY("_start")

/* MEMORYコマンドで、各メモリ領域を定義する */
MEMORY
{
    romall(rx)          : o = 0x000000, l = 0x080000 /* 512KB */
    vectors(r)          : o = 0x000000, l = 0x000100 /* top of ROM */
    rom(rx)             : o = 0x000100, l = 0x07ff00

    ramall(rwx)         : o = 0xffbf20, l = 0x004000 /* 16KB */
    buffer(rwx)         : o = 0xffdf20, l = 0x001d00 /* 8KB 受信のためのバッファ領域を定義 */
    data(rwx)           : o = 0xfffc20, l = 0x000300
    stack(rw)           : o = 0xffff00, l = 0x000000 /* end of RAM */
}

SECTIONS
{
    /* 「.」はロケーションカウンタと呼ばれ現在のカレントアドレスを表す。
    * ロケーションカウンタをゼロに初期化しているので、以降のセクションはゼロ番地から配置される。
    */
    /* . = 0x0; */

    /* vectorsというセクションを作成し、vector.oの.dataセクションを配置する。
    * 割込みベクタが、ロケーションカウンタの指すゼロ番地に配置される。
    */
    .vectors : {
            vector.o(.data)
    } > vectors /* 割込みベクタ領域に配置する */

    /* textセクションの配置。各オブジェクトファイルの.textセクションの内容が集められる。
    * ロケーションカウンタは、.vectorsセクションの配置後に、.vectorsセクションのぶんだけ自動的に増加し、vectorsセクションの末尾を指している。
    * .textセクションは.vectorsセクションの直後に配置されることになる。
    */
    .text : {
            _text_start = . ; /* .textセクションの先頭を指すシンボルを配置 */
            *(.text)
            _etext = . ; /* .textセクションの終端を指すシンボルを配置 */
    } > rom /* .textセクションはROMに配置する */

    /* const定義した変数や文字列リテラルなどを配置 */
    .rodata : {
            _rodata_start = . ;
            *(.strings)
            *(.rodata)
            *(.rodata.*)
            _erodata = . ;
    } > rom

    .buffer : {
            _buffer_start = . ;
    } > buffer

    .data : {
            _data_start = . ;
            *(.data)
            _edata = . ;
    } > data AT> rom /* .dataセクションの「VA≠PA」対応 */

    .bss : {
            _bss_start = . ;
            *(.bss)
            *(COMMON)
            _ebss = . ;
    } > data AT> rom /* .bssセクションの「VA≠PA」対応 */

    . = ALIGN(4); /* 4バイト・アラインメント */
    _end = . ; /* セクションの終端に_endシンボルを配置する */

    .stack : {
            _stack = . ; /* スタックを指すシンボルを配置する */
    } > stack
}